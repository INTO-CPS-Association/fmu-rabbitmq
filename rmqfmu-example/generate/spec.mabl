simulation 
import BooleanLogic;
import DataWriter;
import DataWriterConfig;
import FMI2;
import FMI2Component;
import Logger;
import Math;
import SimulationControl;
{
 	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(distance -> "{distance}");
	FMI2 distance = null;
	@mapFmu(rbmq -> "{rbmq}");
	FMI2 rbmq = null;
	@mapInstance(rbmqInstance -> "rbmqInstance");
	FMI2Component rbmqInstance = null;
	@mapInstance(distanceInstance -> "distanceInstance");
	FMI2Component distanceInstance = null;
	try 
	{
		math = load("Math");
		if( ((math == null)) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( ((logger == null)) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( ((dataWriter == null)) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( ((booleanLogic == null)) )
		{
				error "booleanLogic IS NULL ";
		}
		distance = load("FMI2", "77236337-210e-4e9c-8f2c-c1a0677db21b", "file:/Users/au674354/Desktop/development/fmu-rabbitmq/rmqfmu-example/fmus/distance_from_zero.fmu");
		if( ((distance == null)) )
		{
				error "distance IS NULL ";
		}
		rbmq = load("FMI2", "{cfc65592-ffff-4563-9705-1581b6e7071c}", "file:/Users/au674354/Desktop/development/fmu-rabbitmq/rmqfmu-example/fmus/rmqfmu.fmu");
		if( ((rbmq == null)) )
		{
				error "rbmq IS NULL ";
		}
		rbmqInstance = rbmq.instantiate("rbmqInstance", false, false);
		if( ((rbmqInstance == null)) )
		{
				error "rbmqInstance IS NULL ";
		}
		distanceInstance = distance.instantiate("distanceInstance", false, false);
		if( ((distanceInstance == null)) )
		{
				error "distanceInstance IS NULL ";
		}
		real STEP_SIZE = 0.1;
		real START_TIME = 0.0;
		real END_TIME = 10.0;
		int FMI_OK = 0;
		int FMI_DISCARD = 2;
		int FMI_ERROR = 3;
		int FMI_FATAL = 4;
		BooleanLogic booleanLogic1;
		try 
		{
			booleanLogic1 = load("BooleanLogic");
			if( (booleanLogic1 == null) )
			{
					error "Failed load of: booleanLogic1";
			}
			real distanceinstanceRealIo[3];
			real rbmqinstanceRealShare[2];
			real rbmqinstanceRealIo[19];
			int distanceinstanceIntShare[1];
			int distanceinstanceIntIo[3];
			uint distanceinstanceUintVref[3];
			bool rbmqinstanceBoolIo[19];
			int rbmqinstanceIntIo[19];
			string rbmqinstanceStringIo[19];
			uint rbmqinstanceUintVref[19];
			real fixed_end_time = 0.0;
			fixed_end_time = END_TIME;
			status = rbmqInstance.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setupExperiment' on 'rbmqInstance'";
			}
			status = distanceInstance.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'setupExperiment' on 'distanceInstance'";
			}
			rbmqinstanceUintVref[0] = 0;
			rbmqinstanceStringIo[0] = "localhost";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 1;
			rbmqinstanceIntIo[0] = 5672;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 2;
			rbmqinstanceStringIo[0] = "guest";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 3;
			rbmqinstanceStringIo[0] = "guest";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 4;
			rbmqinstanceStringIo[0] = "data.to_cosim";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 5;
			rbmqinstanceIntIo[0] = 60;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 6;
			rbmqinstanceIntIo[0] = 10;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 7;
			rbmqinstanceIntIo[0] = 300;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 8;
			rbmqinstanceIntIo[0] = 1;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 9;
			rbmqinstanceStringIo[0] = "fmi_digital_twin";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 10;
			rbmqinstanceStringIo[0] = "direct";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 11;
			rbmqinstanceStringIo[0] = "fmi_digital_twin_sh";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 12;
			rbmqinstanceStringIo[0] = "direct";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 13;
			rbmqinstanceStringIo[0] = "data.from_cosim";
			status = rbmqInstance.setString(rbmqinstanceUintVref, 1, rbmqinstanceStringIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setString' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 16;
			rbmqinstanceBoolIo[0] = false;
			status = rbmqInstance.setBoolean(rbmqinstanceUintVref, 1, rbmqinstanceBoolIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetBoolean failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetBoolean failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setBoolean' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 17;
			rbmqinstanceIntIo[0] = 100;
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			status = rbmqInstance.enterInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'enterInitializationMode' on 'rbmqInstance'";
			}
			status = distanceInstance.enterInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'enterInitializationMode' on 'distanceInstance'";
			}
			distanceinstanceUintVref[0] = 0;
			status = distanceInstance.getInteger(distanceinstanceUintVref, 1, distanceinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'getInteger' on 'distanceInstance'";
			}
			distanceinstanceIntShare[0] = distanceinstanceIntIo[0];
			rbmqinstanceUintVref[0] = 102;
			rbmqinstanceIntIo[0] = distanceinstanceIntShare[0];
			status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'setInteger' on 'rbmqInstance'";
			}
			rbmqinstanceUintVref[0] = 101;
			status = rbmqInstance.getReal(rbmqinstanceUintVref, 1, rbmqinstanceRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'getReal' on 'rbmqInstance'";
			}
			rbmqinstanceRealShare[0] = rbmqinstanceRealIo[0];
			distanceinstanceUintVref[0] = 2;
			distanceinstanceRealIo[0] = rbmqinstanceRealShare[0];
			status = distanceInstance.setReal(distanceinstanceUintVref, 1, distanceinstanceRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'setReal' on 'distanceInstance'";
			}
			rbmqinstanceUintVref[0] = 100;
			status = rbmqInstance.getReal(rbmqinstanceUintVref, 1, rbmqinstanceRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'getReal' on 'rbmqInstance'";
			}
			rbmqinstanceRealShare[1] = rbmqinstanceRealIo[0];
			distanceinstanceUintVref[0] = 1;
			distanceinstanceRealIo[0] = rbmqinstanceRealShare[1];
			status = distanceInstance.setReal(distanceinstanceUintVref, 1, distanceinstanceRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'setReal' on 'distanceInstance'";
			}
			status = rbmqInstance.exitInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'exitInitializationMode' on 'rbmqInstance'";
			}
			status = distanceInstance.exitInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'exitInitializationMode' on 'distanceInstance'";
			}
		}		finally 
		{
			if( (booleanLogic1 != null) )
			{
					unload(booleanLogic1);
					booleanLogic1 = null;
			}
		}
		BooleanLogic booleanLogic2;
		DataWriter dataWriter1;
		SimulationControl simulationControl;
		try 
		{
			simulationControl = load("SimulationControl");
			if( (simulationControl == null) )
			{
					error "Failed load of: simulationControl";
			}
			dataWriter1 = load("DataWriter");
			if( (dataWriter1 == null) )
			{
					error "Failed load of: dataWriter1";
			}
			booleanLogic2 = load("BooleanLogic");
			if( (booleanLogic2 == null) )
			{
					error "Failed load of: booleanLogic2";
			}
			bool distanceinstanceCurrentTimeFullStep = true;
			real distanceinstanceCurrentTime = 0.0;
			bool rbmqinstanceCurrentTimeFullStep = true;
			real rbmqinstanceCurrentTime = 0.0;
			real distanceinstanceRealIo[3];
			int rbmqinstanceIntIo[19];
			real rbmqinstanceRealShare[2];
			int distanceinstanceIntShare[1];
			int distanceinstanceIntIo[3];
			uint distanceinstanceUintVref[3];
			real rbmqinstanceRealIo[19];
			uint rbmqinstanceUintVref[19];
			real jac_current_step_size = 0.0;
			real jac_step_size = 0.0;
			@TransferAs("START_TIME");
			real jac_current_communication_point = 0.0;
			real jac_end_time = 0.0;
			jac_current_step_size = STEP_SIZE;
			jac_step_size = STEP_SIZE;
			jac_current_communication_point = START_TIME;
			jac_end_time = END_TIME;
			string datawriter_headers[3] = { "{rbmq}.rbmqInstance.xpos" , "{rbmq}.rbmqInstance.ypos" , "{distance}.distanceInstance.distance" };
			DataWriterConfig datawriter_configuration = dataWriter1.writeHeader(datawriter_headers);
			rbmqinstanceUintVref[0] = 100;
			rbmqinstanceUintVref[1] = 101;
			status = rbmqInstance.getReal(rbmqinstanceUintVref, 2, rbmqinstanceRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", rbmqInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", rbmqInstance);
					}
					error "Failed to 'getReal' on 'rbmqInstance'";
			}
			distanceinstanceUintVref[0] = 0;
			status = distanceInstance.getInteger(distanceinstanceUintVref, 1, distanceinstanceIntIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", distanceInstance);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", distanceInstance);
					}
					error "Failed to 'getInteger' on 'distanceInstance'";
			}
			distanceinstanceIntShare[0] = distanceinstanceIntIo[0];
			rbmqinstanceRealShare[0] = rbmqinstanceRealIo[0];
			rbmqinstanceRealShare[1] = rbmqinstanceRealIo[1];
			real fmu_communicationpoints[2];
			dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, rbmqinstanceRealShare[0], rbmqinstanceRealShare[1], distanceinstanceIntShare[0]);
			bool any_discards = false;
			while( ((jac_current_communication_point + jac_current_step_size) < jac_end_time) )
			{
				bool tmp = simulationControl.stopRequested();
				if( (tmp) )
				{
						error "Simulation stopped by user";
				}
				@Transfer();
				rbmqinstanceUintVref[0] = 102;
				rbmqinstanceIntIo[0] = distanceinstanceIntShare[0];
				status = rbmqInstance.setInteger(rbmqinstanceUintVref, 1, rbmqinstanceIntIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", rbmqInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", rbmqInstance);
						}
						error "Failed to 'setInteger' on 'rbmqInstance'";
				}
				distanceinstanceUintVref[0] = 1;
				distanceinstanceUintVref[1] = 2;
				distanceinstanceRealIo[0] = rbmqinstanceRealShare[0];
				distanceinstanceRealIo[1] = rbmqinstanceRealShare[1];
				status = distanceInstance.setReal(distanceinstanceUintVref, 2, distanceinstanceRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", distanceInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", distanceInstance);
						}
						error "Failed to 'setReal' on 'distanceInstance'";
				}
				any_discards = false;
				status = rbmqInstance.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", rbmqInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", rbmqInstance);
						}
						error "Failed to 'doStep' on 'rbmqInstance'";
				}
				if( (status != FMI_OK) )
				{
						if( (status == FMI_DISCARD) )
						{
								status = rbmqInstance.getRealStatus(2, ref rbmqinstanceCurrentTime);
								rbmqinstanceCurrentTimeFullStep = false;
						}
				}
				else
				{
						rbmqinstanceCurrentTime = jac_current_communication_point + jac_current_step_size;
						rbmqinstanceCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[0] = rbmqinstanceCurrentTime;
				if( (!rbmqinstanceCurrentTimeFullStep) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "rbmqInstance", jac_current_communication_point, jac_current_step_size, rbmqinstanceCurrentTime);
						any_discards = any_discards || !rbmqinstanceCurrentTimeFullStep;
				}
				status = distanceInstance.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", distanceInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", distanceInstance);
						}
						error "Failed to 'doStep' on 'distanceInstance'";
				}
				if( (status != FMI_OK) )
				{
						if( (status == FMI_DISCARD) )
						{
								status = distanceInstance.getRealStatus(2, ref distanceinstanceCurrentTime);
								distanceinstanceCurrentTimeFullStep = false;
						}
				}
				else
				{
						distanceinstanceCurrentTime = jac_current_communication_point + jac_current_step_size;
						distanceinstanceCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[1] = distanceinstanceCurrentTime;
				if( (!distanceinstanceCurrentTimeFullStep) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "distanceInstance", jac_current_communication_point, jac_current_step_size, distanceinstanceCurrentTime);
						any_discards = any_discards || !distanceinstanceCurrentTimeFullStep;
				}
				distanceinstanceUintVref[0] = 0;
				status = distanceInstance.getInteger(distanceinstanceUintVref, 1, distanceinstanceIntIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", distanceInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", distanceInstance);
						}
						error "Failed to 'getInteger' on 'distanceInstance'";
				}
				rbmqinstanceUintVref[0] = 100;
				rbmqinstanceUintVref[1] = 101;
				status = rbmqInstance.getReal(rbmqinstanceUintVref, 2, rbmqinstanceRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", rbmqInstance);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", rbmqInstance);
						}
						error "Failed to 'getReal' on 'rbmqInstance'";
				}
				distanceinstanceIntShare[0] = distanceinstanceIntIo[0];
				rbmqinstanceRealShare[0] = rbmqinstanceRealIo[0];
				rbmqinstanceRealShare[1] = rbmqinstanceRealIo[1];
				if( (!any_discards) )
				{
						jac_current_communication_point = jac_current_communication_point + jac_current_step_size;
						dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, rbmqinstanceRealShare[0], rbmqinstanceRealShare[1], distanceinstanceIntShare[0]);
						jac_current_step_size = jac_step_size;
				}
			}
			dataWriter1.close();
		}		finally 
		{
			if( (simulationControl != null) )
			{
					unload(simulationControl);
					simulationControl = null;
			}
			if( (dataWriter1 != null) )
			{
					unload(dataWriter1);
					dataWriter1 = null;
			}
			if( (booleanLogic2 != null) )
			{
					unload(booleanLogic2);
					booleanLogic2 = null;
			}
		}
		rbmqInstance.terminate();
		distanceInstance.terminate();
	}	finally 
	{
		if( ((rbmqInstance != null)) )
		{
				rbmq.freeInstance(rbmqInstance);
				rbmqInstance = null;
		}
		if( ((distanceInstance != null)) )
		{
				distance.freeInstance(distanceInstance);
				distanceInstance = null;
		}
		if( ((distance != null)) )
		{
				unload(distance);
				distance = null;
		}
		if( ((rbmq != null)) )
		{
				unload(rbmq);
				rbmq = null;
		}
		if( ((math != null)) )
		{
				unload(math);
				math = null;
		}
		if( ((logger != null)) )
		{
				unload(logger);
				logger = null;
		}
		if( ((dataWriter != null)) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( ((booleanLogic != null)) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}