# This is a basic workflow to help you get started with Actions

name: rabbitmq

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the development branch
  push:
    branches: [ development, ttk/github-act ]
  pull_request:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          
      - uses: lukka/get-cmake@v3.20.1
          
      - name: Prepare variables for ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: | 
          echo "linux-x64" > target
          echo "linux-x86_64" > install_name
          echo " " > cmakeFlag
          
      - name: Set up CLANG
        if: matrix.os == 'ubuntu-latest'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64
          
      - name: Prepare variables for windows
        shell: bash
        if: matrix.os == 'windows-latest'
        run: | 
          echo "win-x64" > target
          echo "win-x86_64" > install_name
          echo "-G ""MSYS Makefiles""" > cmakeFlag
          cat cmakeFlag
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Prepare variables for macos
        if: matrix.os == 'macos-latest'
        run: | 
          echo "darwin-x64" > target
          echo "darwin-x86_64" > install_name
          echo " " > cmakeFlag
          
      - name: Build
        shell: bash
        run: |
          export target=$(cat target)
          export install_name=$(cat install_name)
          export cmakeFlag=$(cat cmakeFlag)
          echo $target
          echo $install_name
          repo=$(git rev-parse --show-toplevel)
          current_dir=$(pwd)
          cd $repo

          working_dir=build/$target

          mkdir -p $working_dir
          echo Build dependencies

          build_xercersc()
          {
            cmake $3 -B$1 -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON -DCMAKE_INSTALL_PREFIX=$2 -Dthreads:BOOL=OFF -Dnetwork:BOOL=OFF -Hthirdparty/xerces-c
            make -C$1 -j8
            make -C$1 install
          }
          if [ ! -d build/external/$install_name ]
          then

          echo build_xercersc $working_dir/xerces-c build/external/$install_name $cmakeFlag 
          build_xercersc $working_dir/xerces-c build/external/$install_name $cmakeFlag 
          else
          echo "Dependency already generated"
          fi

          echo Running CMake
          rm -f thirdparty/rabbitmq-c/rabbitmq-c/librabbitmq/config.h
          cmake $cmakeFlag -B$working_dir -H.

          echo Compiling

          make -C$working_dir -j8
          make -C$working_dir/rabbitmq-fmu install
          cd $current_dir

          echo Done


 
