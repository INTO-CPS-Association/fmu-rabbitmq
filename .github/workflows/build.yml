# This is a basic workflow to help you get started with Actions

name: rabbitmq

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the development branch
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          
      - name: get rabbitmq Ubuntu ONLY
        if: matrix.os == 'ubuntu-latest'
        uses: getong/rabbitmq-action@v1.2
        with:
          rabbitmq version: '3.8.2-management'
          host port: 5672
          rabbitmq user: 'guest'
          rabbitmq password: 'guest'

      - uses: lukka/get-cmake@v3.20.1
          
      - name: Prepare variables for ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: | 
          echo "linux-x64" > target
          echo "linux-x86_64" > install_name
          echo " " > cmakeFlag
          echo " " > cmakeFlagValue
          
      - name: Set up CLANG
        if: matrix.os == 'ubuntu-latest'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64
          
      - name: Prepare variables for windows
        shell: bash
        if: matrix.os == 'windows-latest'
        run: | 
          echo "win-x64" > target
          echo "win-x86_64" > install_name
          echo "-G" > cmakeFlag
          echo MSYS Makefiles > cmakeFlagValue
          
      - name: Other win prep
        if: matrix.os == 'windows-latest'
        run: | 
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Prepare variables for macos
        if: matrix.os == 'macos-latest'
        run: | 
          echo "darwin-x64" > target
          echo "darwin-x86_64" > install_name
          echo " " > cmakeFlag
          echo " " > cmakeFlagValue
          
      - name: Build
        shell: bash
        run: |
          export target=$(cat target)
          export install_name=$(cat install_name)
          export cmakeFlag=$(cat cmakeFlag)
          export cmakeFlagValue=$(cat cmakeFlagValue)
          echo $target
          echo $install_name
          repo=$(git rev-parse --show-toplevel)
          current_dir=$(pwd)
          cd $repo

          working_dir=build/$target

          mkdir -p $working_dir
          echo Build dependencies

          build_xercersc()
          {
            echo cmake $3 "$4" -B$1 -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON -DCMAKE_INSTALL_PREFIX=$2 -Dthreads:BOOL=OFF -Dnetwork:BOOL=OFF -Hthirdparty/xerces-c
            cmake $3 "$4" -B$1 -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON -DCMAKE_INSTALL_PREFIX=$2 -Dthreads:BOOL=OFF -Dnetwork:BOOL=OFF -Hthirdparty/xerces-c
            make -C$1 -j8
            make -C$1 install
          }
          if [ ! -d build/external/$install_name ]
          then

          echo build_xercersc $working_dir/xerces-c build/external/$install_name $cmakeFlag "$cmakeFlagValue"
          build_xercersc $working_dir/xerces-c build/external/$install_name $cmakeFlag "$cmakeFlagValue"
          else
          echo "Dependency already generated"
          fi

          echo Running CMake
          rm -f thirdparty/rabbitmq-c/rabbitmq-c/librabbitmq/config.h
          cmake $cmakeFlag "$cmakeFlagValue" -B$working_dir -H.

          echo Compiling

          make -C$working_dir -j8
          make -C$working_dir/rabbitmq-fmu install
          cd $current_dir

          echo Done
          echo $(pwd)
          ls
          
      - name: Run unit tests on UNIX
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          export target=$(cat target)
          echo $(pwd) 
          ctest --test-dir build/$target -R unit-test-rabbitmq
          ctest --test-dir build/$target -R unit-test-rabbitmq-core
          
      - name: Run unit tests on WIN
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          export target=$(cat target)
          echo $(pwd) 
          ctest -R unit-test-rabbitmq
          ctest -R unit-test-rabbitmq-core
        
          
      - name : Prep for integration tests UBUNTU # these need additional scripts that produce data to the rabbitmq, require rabbitmq server
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd server
          python3 -m pip install pika --upgrade
          nohup python3 playback_gazebo_data-test.py & exit 
          
      - name: Run integration tests UBUNTU # there are no integration tests yet for the core.
        if: matrix.os == 'ubuntu-latest'
        run: |
          export target=$(cat target)
          cp modelDescription.xml build/$target/rabbitmq-fmu/
          ./build/$target/rabbitmq-core/it-test-rabbitmq-core
          ls -R --group-directories-first /usr/share/zoneinfo
          sudo timedatectl set-timezone Europe/Copenhagen
          ./build/$target/rabbitmq-fmu/it-test-rabbitmq
          
      - name: Upload artifact macos
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: rabbitmq.dylib
          path: build/darwin-x64/rabbitmq-fmu/rabbitmq.dylib
          
      - name: check 
        shell: bash
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo $(pwd)
          ls build/linux-x64/rabbitmq-fmu/

      - name: Upload artifact linux 
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: rabbitmq.so
          path: build/linux-x64/rabbitmq-fmu/rabbitmq.so

      - name: Upload artifact windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: rabbitmq.dll
          path: build/win-x64/rabbitmq-fmu/rabbitmq.dll

      - name: Upload modelDescription.xml
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: modelDescription.xml
          path: rabbitmq-fmu/modelDescription.xml

  pack-fmu:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download dll
        uses: actions/download-artifact@v2
        with:
          name: rabbitmq.dll
          path: rabbitmq/binaries/win64/

      - name: Download shared library
        uses: actions/download-artifact@v2
        with:
          name: rabbitmq.so
          path: rabbitmq/binaries/linux64/

      - name: Download dylib
        uses: actions/download-artifact@v2
        with:
          name: rabbitmq.dylib
          path: rabbitmq/binaries/darwin64/

      - name: Download model description file
        uses: actions/download-artifact@v2
        with:
          name: modelDescription.xml
          path: rabbitmq/
          
      - name: Download model description file to resources folder
        uses: actions/download-artifact@v2
        with:
          name: modelDescription.xml
          path: rabbitmq/resources

      - name: Upload FMU 
        uses: actions/upload-artifact@v2
        with:
          name: rabbitmq.fmu
          path: rabbitmq
 
