# This is a basic workflow to help you get started with Actions

name: rabbitmq

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the development branch
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          
      - name: Prepare variables for ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: | 
          echo "linux-x64" > target
          echo "linux-x86_64" > install_name
          echo "dockcross/linux-x64:latest" > dockcross_url
          
      - name: Prepare variables for windows
        if: matrix.os == 'windows-latest'
        run: | 
          echo "win-x64" > target
          echo "win-x86_64" > install_name
          echo "dockcross/windows-static-x64:latest" > dockcross_url
          
      - name: Prepare variables for macos
        if: matrix.os == 'macos-latest'
        run: | 
          echo "darwin-x64" > target
          echo "darwin-x86_64" > install_name
          echo "docker.sweng.au.dk/dockcross-darwin-x64-clang:latest" > dockcross_url
          brew install docker
          systemctl start docker
          
      - name: Build
        run: |
          export target=$(cat target)
          export install_name=$(cat install_name)
          export dockcross_url=$(cat dockcross_url)
          echo $target
          echo $install_name
          echo $dockcross_url
          set -e
          repo=$(git rev-parse --show-toplevel)
          current_dir=$(pwd)
          cd $repo
          working_dir=build/$target

          mkdir -p $working_dir

          script=$working_dir/${target}-dockcross

          echo Creating env

          docker run --rm $dockcross_url > $script
          chmod +x $script

          echo Build dependencies

          build_xercersc(){
            $1 cmake -B$2 -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON -DCMAKE_INSTALL_PREFIX=$3 -Dthreads:BOOL=OFF -Dnetwork:BOOL=OFF -Hthirdparty/xerces-c
            $1 make -C$2 -j8
            $1 make -C$2 install
          }
          if [ ! -d build/external/$install_name ]
          then

          build_xercersc $script $working_dir/xerces-c build/external/$install_name
          else
          echo "Dependency already generated"
          fi

          echo Running CMake
          rm -f thirdparty/rabbitmq-c/rabbitmq-c/librabbitmq/config.h
          ./$script cmake -B$working_dir -H.

          echo Compiling

          ./$script make -C$working_dir -j8
          ./$script make -C$working_dir/rabbitmq-fmu install
          cd $current_dir

          echo Done


 
