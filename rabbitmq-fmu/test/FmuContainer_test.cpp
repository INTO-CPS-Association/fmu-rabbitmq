//
// Created by Kenneth Guldbrandt Lausdahl on 21/01/2020.
//
#include "gtest/gtest.h"
#include "FmuContainer.h"
#include "DataPoint.h"

namespace {

    class TestRabbitMq : public RabbitmqHandler {
        list<string> messages;
    public :
        TestRabbitMq(list<string> messages) : RabbitmqHandler("", 0, "",
                                                              "",
                                                              "",
                                                              ""), messages(messages) {}


        bool open() override { return true; }

        void close() override {}

        void bind() override {}

        bool consume(string &json) override {

            if (messages.empty()) {
                return false;
            }

            json = messages.front();
            messages.pop_front();


            return true;

        }


    };


    class TestFmuContainer : public FmuContainer {
    public:
        TestFmuContainer(const fmi2CallbackFunctions *mFunctions, bool loggingOn, const char *mName,
                         map<string, ModelDescriptionParser::ScalarVariable> &nameToValueReference,
                         DataPoint &initialDataPoint) : FmuContainer(mFunctions, loggingOn, mName,
                                                                     nameToValueReference, initialDataPoint) {}

    private:
        RabbitmqHandler *createCommunicationHandler(const string &hostname, int port, const string &username,
                                                    const string &password, const string &exchange,
                                                    const string &queueBindingKey) {
            cout << "Create custom test communication handler" << endl;
            list<string> list;

//
//            4.4             1.014952800923189
//            4.5                    1.0048817851541365
//            4.6                   0.9958507989788068
//            4.699999999999999       0.9877524389752776

            list.push_back(R"({"time": "2019-01-04T16:41:24+02:00", "level": 0.0})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.100000+02:00", "level": 0.1099999999999999})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.200000+02:00", "level": 0.19999999999999996})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.300000+02:00", "level": 0.30000000000000004})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.400000+02:00", "level": 0.40000000000000013})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.500000+02:00", "level": 0.5000000000000002})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.600000+02:00", "level": 0.6000000000000003})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.700000+02:00", "level": 0.7000000000000004})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.800000+02:00", "level": 0.8000000000000005})");
            list.push_back(R"({"time": "2019-01-04T16:41:24.900000+02:00", "level": 0.9000000000000006})");
            list.push_back(R"({"time": "2019-01-04T16:41:25+02:00", "level": 1.0000000000000007})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.100000+02:00", "level": 1.100000000000003})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.200000+02:00", "level": 1.2000000000000053})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.300000+02:00", "level": 1.3000000000000076})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.400000+02:00", "level": 1.40000000000001})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.500000+02:00", "level": 1.5000000000000122})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.600000+02:00", "level": 1.6000000000000145})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.700000+02:00", "level": 1.7000000000000168})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.800000+02:00", "level": 1.8000000000000191})");
            list.push_back(R"({"time": "2019-01-04T16:41:25.900000+02:00", "level": 1.9000000000000214})");
            list.push_back(R"({"time": "2019-01-04T16:41:26+02:00", "level": 2.0000000000000235})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.100000+02:00", "level": 2.110000000000021})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.200000+02:00", "level": 1.9902812339436071})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.300000+02:00", "level": 1.879488458105753})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.400000+02:00", "level": 1.7801372059716003})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.500000+02:00", "level": 1.6910459161652158})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.600000+02:00", "level": 1.6111550466606475})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.700000+02:00", "level": 1.5395144738945912})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.800000+02:00", "level": 1.4752721931674422})");
            list.push_back(R"({"time": "2019-01-04T16:41:26.900000+02:00", "level": 1.4176641859492016})");
            list.push_back(R"({"time": "2019-01-04T16:41:27+02:00", "level": 1.3660053335844786})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.100000+02:00", "level": 1.319681269335382})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.200000+02:00", "level": 1.2781410718605366})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.300000+02:00", "level": 1.2408907132354772})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.400000+02:00", "level": 1.2074871835932366})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.500000+02:00", "level": 1.1775332225108484})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.600000+02:00", "level": 1.1506725944833651})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.700000+02:00", "level": 1.1265858522977028})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.800000+02:00", "level": 1.1049865379211017})");
            list.push_back(R"({"time": "2019-01-04T16:41:27.900000+02:00", "level": 1.085617775722246})");
            list.push_back(R"({"time": "2019-01-04T16:41:28+02:00", "level": 1.0682492175090177})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.100000+02:00", "level": 1.0526743030509254})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.200000+02:00", "level": 1.0387078035062411})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.300000+02:00", "level": 1.0261836185383848})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.400000+02:00", "level": 1.014952800923189})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.500000+02:00", "level": 1.0048817851541365})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.600000+02:00", "level": 0.9958507989788068})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.700000+02:00", "level": 0.9877524389752776})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.800000+02:00", "level": 1.0859580220444744})");
            list.push_back(R"({"time": "2019-01-04T16:41:28.900000+02:00", "level": 1.1859580220444768})");
            list.push_back(R"({"time": "2019-01-04T16:41:29+02:00", "level": 1.285958022044479})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.100000+02:00", "level": 1.3859580220444814})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.200000+02:00", "level": 1.4859580220444837})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.300000+02:00", "level": 1.585958022044486})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.400000+02:00", "level": 1.6859580220444883})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.500000+02:00", "level": 1.7859580220444906})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.600000+02:00", "level": 1.885958022044493})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.700000+02:00", "level": 1.9859580220444952})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.800000+02:00", "level": 2.0859580220444935})");
            list.push_back(R"({"time": "2019-01-04T16:41:29.900000+02:00", "level": 2.1859580220444914})");
            list.push_back(R"({"time": "2019-01-04T16:41:30+02:00", "level": 2.058518842946217})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.100000+02:00", "level": 1.940679197716537})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.200000+02:00", "level": 1.8350088034505139})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.300000+02:00", "level": 1.7402509466819145})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.400000+02:00", "level": 1.6552786942194706})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.500000+02:00", "level": 1.5790814907920725})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.600000+02:00", "level": 1.5107531407495396})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.700000+02:00", "level": 1.4494810308881407})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.800000+02:00", "level": 1.3945364662304194})");
            list.push_back(R"({"time": "2019-01-04T16:41:30.900000+02:00", "level": 1.3452660038250044})");
            list.push_back(R"({"time": "2019-01-04T16:41:31+02:00", "level": 1.3010836815012947})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.100000+02:00", "level": 1.2614640491574003})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.200000+02:00", "level": 1.2259359197040731})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.300000+02:00", "level": 1.194076765346047})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.400000+02:00", "level": 1.1655076925570644})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.500000+02:00", "level": 1.1398889359871307})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.600000+02:00", "level": 1.1169158177120915})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.700000+02:00", "level": 1.0963151237698119})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.800000+02:00", "level": 1.077841854889959})");
            list.push_back(R"({"time": "2019-01-04T16:41:31.900000+02:00", "level": 1.0612763127745573})");
            list.push_back(R"({"time": "2019-01-04T16:41:32+02:00", "level": 1.0464214872771362})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.100000+02:00", "level": 1.0331007134067987})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.200000+02:00", "level": 1.0211555702924957})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.300000+02:00", "level": 1.0104439971203927})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.400000+02:00", "level": 1.0008386036375856})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.500000+02:00", "level": 0.9922251551294017})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.600000+02:00", "level": 0.9845012138524587})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.700000+02:00", "level": 1.0827127033139619})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.800000+02:00", "level": 1.1827127033139642})");
            list.push_back(R"({"time": "2019-01-04T16:41:32.900000+02:00", "level": 1.2827127033139665})");
            list.push_back(R"({"time": "2019-01-04T16:41:33+02:00", "level": 1.3827127033139688})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.100000+02:00", "level": 1.482712703313971})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.200000+02:00", "level": 1.5827127033139734})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.300000+02:00", "level": 1.6827127033139757})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.400000+02:00", "level": 1.782712703313978})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.500000+02:00", "level": 1.8827127033139803})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.600000+02:00", "level": 1.9827127033139826})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.700000+02:00", "level": 2.082712703313981})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.800000+02:00", "level": 2.182712703313979})");
            list.push_back(R"({"time": "2019-01-04T16:41:33.900000+02:00", "level": 2.0556033801068625})");
            list.push_back(R"({"time": "2019-01-04T16:41:34+02:00", "level": 1.9380648135073668})");
            list.push_back(R"({"time": "2019-01-04T16:41:34.100000+02:00", "level": 1.9380648135073668})");



//            list.push_back("{\"time\": \"2019-01-04T16:41:24+02:00\", \"level\": 0.0}");
//            list.push_back("{\"time\": \"2019-01-04T16:41:24.100000+02:00\", \"level\": 0.1099999999999999}");
            return new TestRabbitMq(list);
        }
    };


    TEST(FmuContainerTest, InitAndSim
    ) {

        map<string, ModelDescriptionParser::ScalarVariable> svNameRefMap;
        ModelDescriptionParser::ScalarVariable sv;
        sv.name = "level";
        sv.setReal(0);
        sv.valueReference = 0;

        svNameRefMap[sv.name] = sv;

        DataPoint dp;
        dp.stringValues[0] = "";
        dp.stringValues[2] = "";
        dp.stringValues[3] = "";
        dp.stringValues[4] = "";
        dp.integerValues[1] = 8;
        dp.integerValues[5] = 1;

        TestFmuContainer c(NULL, true, "m", svNameRefMap, dp);

        c.initialize();
        c.setup(0);
        double time, step = 0.1;

        double res[] = {0.0, 0.1099999999999999, 0.19999999999999996, 0.30000000000000004, 0.40000000000000013,
                        0.5000000000000002, 0.6000000000000003, 0.7000000000000004, 0.8000000000000005,
                        0.9000000000000006, 1.0000000000000007, 1.100000000000003, 1.2000000000000053,
                        1.3000000000000076, 1.40000000000001, 1.5000000000000122, 1.6000000000000145,
                        1.7000000000000168, 1.8000000000000191, 1.9000000000000214, 2.0000000000000235,
                        2.110000000000021, 1.9902812339436071, 1.879488458105753, 1.7801372059716003,
                        1.6910459161652158, 1.6111550466606475, 1.5395144738945912, 1.4752721931674422,
                        1.4176641859492016, 1.3660053335844786, 1.319681269335382, 1.2781410718605366,
                        1.2408907132354772, 1.2074871835932366, 1.1775332225108484, 1.1506725944833651,
                        1.1265858522977028, 1.1049865379211017, 1.085617775722246, 1.0682492175090177,
                        1.0526743030509254, 1.0387078035062411, 1.0261836185383848, 1.014952800923189,
                        1.0048817851541365, 0.9958507989788068, 0.9877524389752776, 1.0859580220444744,
                        1.1859580220444768, 1.285958022044479, 1.3859580220444814, 1.4859580220444837,
                        1.585958022044486, 1.6859580220444883, 1.7859580220444906, 1.885958022044493,
                        1.9859580220444952, 2.0859580220444935, 2.1859580220444914, 2.058518842946217,
                        1.940679197716537, 1.8350088034505139, 1.7402509466819145, 1.6552786942194706,
                        1.5790814907920725, 1.5107531407495396, 1.4494810308881407, 1.3945364662304194,
                        1.3452660038250044, 1.3010836815012947, 1.2614640491574003, 1.2259359197040731,
                        1.194076765346047, 1.1655076925570644, 1.1398889359871307, 1.1169158177120915,
                        1.0963151237698119, 1.077841854889959, 1.0612763127745573, 1.0464214872771362,
                        1.0331007134067987, 1.0211555702924957, 1.0104439971203927, 1.0008386036375856,
                        0.9922251551294017, 0.9845012138524587, 1.0827127033139619, 1.1827127033139642,
                        1.2827127033139665, 1.3827127033139688, 1.482712703313971, 1.5827127033139734,
                        1.6827127033139757, 1.782712703313978, 1.8827127033139803, 1.9827127033139826,
                        2.082712703313981, 2.182712703313979, 2.0556033801068625, 1.9380648135073668,
                        1.9380648135073668};


        fmi2ValueReference vrefs[1];

        vrefs[0] = sv.valueReference;


        fmi2Real values[1];
        c.getReal(vrefs, 1, values);
        fmi2Real level = values[0];
        ASSERT_DOUBLE_EQ(level, res[0]);

        for (int i = 0; i  < (sizeof(res)/sizeof(*res)); i++) {
            c.step(time, step);


            fmi2Real values[1];
            c.getReal(vrefs, 1, values);
            fmi2Real level = values[0];
            time += step;
            cout << "Level is " << level << " time " << time << endl;

            if (i + 1 < 4) {

                cout << "Comparing Expected: " << res[i + 1] << " = " << level << endl;
                ASSERT_DOUBLE_EQ(level, res[i + 1]);

            }

        }
    }

}